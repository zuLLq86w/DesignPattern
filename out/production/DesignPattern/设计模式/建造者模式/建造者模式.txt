

盖房项目需求
    1）需要建房子：这一过程为打桩、砌墙、封顶。
    2）房子有各种各样的，比如普通房、高楼、别墅，各种房子的过程虽然一样，但是要求不要相同。
    3）请编写程序，完成需求。

传统方式分析（Demo）：
    1）优点是比较好理解，简单易操作。
    2）设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好，也就是说，这种设计方案，把产品（即：房子）和创建产品的过程（即：建房子流程）封装在一起，耦合性增强了。
    3）解决方案：将产品和产品建造过程解耦 => 建造者模式。


基本介绍：
    1）建造者模式(Builder Pattern)又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。
    2）建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建他们，用户不需要知道内部的具体构建细节。

建造者模式的四个角色
    1）Product（产品角色）：一个具体的产品对象。
    2）Builder（抽象建造者）：创建一个Product对象的各个部件指定的接口/抽象类。
    3）ConcreteBuilder（具体建造者）：实现接口，构建和装配各个部件。
    4）Director（指挥者）：构建一个使用Builder接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。


