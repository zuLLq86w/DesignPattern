

oo中的继承性的思考与说明：
    1.继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然他不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。
    2.继承在给程序设计带来便利的同时，也带来了弊端。比如，使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障。
    3，问题提出：在编程中，如何正确使用继承 => 设计原则.里氏替换原则


基本介绍：
    1.里氏替换原则在1988年，由麻省理工学院的姓里的女士提出的。
    2.如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P，在所有的对象o1都代换为o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型.换句话说，所有引用基类的地方必须能透明的使用其子类的对象。
    3.在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法。
    4.里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题。


解决方法：
    1.我们发现Demo1中原本运行正常的相减功能发生了错误。原因就是类B无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类中的方法完成新功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较繁琐的时候。
    2.通常的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替。






