

咖啡订单项目：
    1）咖啡种类/单品咖啡：Espresso（意大利浓咖啡）、ShortBlack、LongBlack（美式咖啡）、Decaf（无因咖啡）
    2）调料：Milk、Soy（豆浆）、Chocolate
    3）要求再扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便
    4）使用OO的来计算不同种类咖啡的费用：客户可以点单品咖啡，也可以单品咖啡+调料组合


方案1分析：
    1.Drink是一个抽象类，表示饮料
    2.des就是对咖啡的描述，比如咖啡的名字。
    3.cost()方法就是计算费用，Drink类中做成一个抽象方法。
    4.Decaf就是单品咖啡，继承Drink并实现cost
    5.Espresso&&Milk就是单品咖啡+调料，这个组合很多
    6.问题：这样设计，会有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，就会出现类爆炸。


方案2分析：
    方案1因为咖啡单品+调料组合会造成类的倍增，因此可以做改进，将调料内置到Drink类，这样就不会造成类数量过多。从而提高项目的可维护性。

    问题：
    1.方案2可以控制类的数量，不至于造成很多的类。
    2.在增加或者删除调料种类时，代码的维护量还是很大。
    3.考虑到用户可以添加多分调料时，可以将hasMilk返回一个对应int
    4.可以考虑装饰着模式。


装饰者模式定义：
    1.装饰者模式：动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则(ocp)。
    2.这里提到的动态的将新功能附加到对象和ocp原则，在后面的应用实例上会以代码的形式体现
