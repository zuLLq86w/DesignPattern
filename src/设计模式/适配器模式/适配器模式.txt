

基本介绍：
    1）适配器模式（Adapter Pattern）将某个类的接口转换成客户端期望的另一个接口表示，主要目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器（wrapper）
    2）适配器模式属于结构性模式。
    3）主要分为三类：类适配器模式、对象适配器模式、接口适配器模式


工作原理：
    1）适配器模式：将一个类的接口转换成另一个接口，让原本接口不兼容的类可以兼容。
    2）从用户的角度看不到被适配者，是解耦的。
    3）用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法。
    4）用户收到反馈结果，感觉只是和目标接口交互，

类适配器模式
    基本介绍：Adapter类、通过继承src类，实现dst类接口，完成src -> dst的适配。

    应用实例：
    1）以生活中充电器的例子来讲解适配器，充电器本身相当于Adapter，220V交流电相当于src（即被适配者），我们的目的dst（即 目标）是5V直流电

    注意事项：
    1）Java是单继承机制，所以类适配器需要继承src类这一点算是一个缺点，因为这要求dst必须是接口，有一定局限性。
    2）src类的方法在Adapter中都会暴露出来，也增加了使用的成本。
    3）由于其继承了src类，所以它可以根据需求重写src类的方法，是的Adapter的灵活性增强了。

对象适配器模式
    基本介绍：
    1）基本思路和类的适配器模式相同，只是将Adapter类作修改，不是继承src类，而是持有src类的实例，以解决兼容性的问题。即：持有src类，实现dst类接口，完成src->dst的适配。
    2）根据“合成复用”原则，在系统中尽量使用关联关系来替代继承关系。
    3）对象适配器模式是适配器模式常用的一种

    注意事项：
    1）对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合替代继承，所以它解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口。
    2）使用成本更低，更灵活。


接口适配器模式：
    基本介绍：
    1）一些书籍称为：适配器模式(Default Adapter Pattern) 或缺省适配器模式。
    2）当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类中地某些方法来实现需求。
    3）适用于一个接口不想使用其所有的方法的情况。







